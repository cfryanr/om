// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/commands"
)

type MetadataProvider struct {
	MetadataBytesStub        func() ([]byte, error)
	metadataBytesMutex       sync.RWMutex
	metadataBytesArgsForCall []struct {
	}
	metadataBytesReturns struct {
		result1 []byte
		result2 error
	}
	metadataBytesReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MetadataProvider) MetadataBytes() ([]byte, error) {
	fake.metadataBytesMutex.Lock()
	ret, specificReturn := fake.metadataBytesReturnsOnCall[len(fake.metadataBytesArgsForCall)]
	fake.metadataBytesArgsForCall = append(fake.metadataBytesArgsForCall, struct {
	}{})
	fake.recordInvocation("MetadataBytes", []interface{}{})
	fake.metadataBytesMutex.Unlock()
	if fake.MetadataBytesStub != nil {
		return fake.MetadataBytesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.metadataBytesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MetadataProvider) MetadataBytesCallCount() int {
	fake.metadataBytesMutex.RLock()
	defer fake.metadataBytesMutex.RUnlock()
	return len(fake.metadataBytesArgsForCall)
}

func (fake *MetadataProvider) MetadataBytesCalls(stub func() ([]byte, error)) {
	fake.metadataBytesMutex.Lock()
	defer fake.metadataBytesMutex.Unlock()
	fake.MetadataBytesStub = stub
}

func (fake *MetadataProvider) MetadataBytesReturns(result1 []byte, result2 error) {
	fake.metadataBytesMutex.Lock()
	defer fake.metadataBytesMutex.Unlock()
	fake.MetadataBytesStub = nil
	fake.metadataBytesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *MetadataProvider) MetadataBytesReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.metadataBytesMutex.Lock()
	defer fake.metadataBytesMutex.Unlock()
	fake.MetadataBytesStub = nil
	if fake.metadataBytesReturnsOnCall == nil {
		fake.metadataBytesReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.metadataBytesReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *MetadataProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.metadataBytesMutex.RLock()
	defer fake.metadataBytesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MetadataProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.MetadataProvider = new(MetadataProvider)
