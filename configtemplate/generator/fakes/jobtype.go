// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type FakeJobType struct {
	HasPersistentDiskStub        func() bool
	hasPersistentDiskMutex       sync.RWMutex
	hasPersistentDiskArgsForCall []struct {
	}
	hasPersistentDiskReturns struct {
		result1 bool
	}
	hasPersistentDiskReturnsOnCall map[int]struct {
		result1 bool
	}
	InstanceDefinitionConfigurableStub        func() bool
	instanceDefinitionConfigurableMutex       sync.RWMutex
	instanceDefinitionConfigurableArgsForCall []struct {
	}
	instanceDefinitionConfigurableReturns struct {
		result1 bool
	}
	instanceDefinitionConfigurableReturnsOnCall map[int]struct {
		result1 bool
	}
	IsIncludedStub        func() bool
	isIncludedMutex       sync.RWMutex
	isIncludedArgsForCall []struct {
	}
	isIncludedReturns struct {
		result1 bool
	}
	isIncludedReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJobType) HasPersistentDisk() bool {
	fake.hasPersistentDiskMutex.Lock()
	ret, specificReturn := fake.hasPersistentDiskReturnsOnCall[len(fake.hasPersistentDiskArgsForCall)]
	fake.hasPersistentDiskArgsForCall = append(fake.hasPersistentDiskArgsForCall, struct {
	}{})
	fake.recordInvocation("HasPersistentDisk", []interface{}{})
	fake.hasPersistentDiskMutex.Unlock()
	if fake.HasPersistentDiskStub != nil {
		return fake.HasPersistentDiskStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.hasPersistentDiskReturns
	return fakeReturns.result1
}

func (fake *FakeJobType) HasPersistentDiskCallCount() int {
	fake.hasPersistentDiskMutex.RLock()
	defer fake.hasPersistentDiskMutex.RUnlock()
	return len(fake.hasPersistentDiskArgsForCall)
}

func (fake *FakeJobType) HasPersistentDiskCalls(stub func() bool) {
	fake.hasPersistentDiskMutex.Lock()
	defer fake.hasPersistentDiskMutex.Unlock()
	fake.HasPersistentDiskStub = stub
}

func (fake *FakeJobType) HasPersistentDiskReturns(result1 bool) {
	fake.hasPersistentDiskMutex.Lock()
	defer fake.hasPersistentDiskMutex.Unlock()
	fake.HasPersistentDiskStub = nil
	fake.hasPersistentDiskReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeJobType) HasPersistentDiskReturnsOnCall(i int, result1 bool) {
	fake.hasPersistentDiskMutex.Lock()
	defer fake.hasPersistentDiskMutex.Unlock()
	fake.HasPersistentDiskStub = nil
	if fake.hasPersistentDiskReturnsOnCall == nil {
		fake.hasPersistentDiskReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasPersistentDiskReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeJobType) InstanceDefinitionConfigurable() bool {
	fake.instanceDefinitionConfigurableMutex.Lock()
	ret, specificReturn := fake.instanceDefinitionConfigurableReturnsOnCall[len(fake.instanceDefinitionConfigurableArgsForCall)]
	fake.instanceDefinitionConfigurableArgsForCall = append(fake.instanceDefinitionConfigurableArgsForCall, struct {
	}{})
	fake.recordInvocation("InstanceDefinitionConfigurable", []interface{}{})
	fake.instanceDefinitionConfigurableMutex.Unlock()
	if fake.InstanceDefinitionConfigurableStub != nil {
		return fake.InstanceDefinitionConfigurableStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.instanceDefinitionConfigurableReturns
	return fakeReturns.result1
}

func (fake *FakeJobType) InstanceDefinitionConfigurableCallCount() int {
	fake.instanceDefinitionConfigurableMutex.RLock()
	defer fake.instanceDefinitionConfigurableMutex.RUnlock()
	return len(fake.instanceDefinitionConfigurableArgsForCall)
}

func (fake *FakeJobType) InstanceDefinitionConfigurableCalls(stub func() bool) {
	fake.instanceDefinitionConfigurableMutex.Lock()
	defer fake.instanceDefinitionConfigurableMutex.Unlock()
	fake.InstanceDefinitionConfigurableStub = stub
}

func (fake *FakeJobType) InstanceDefinitionConfigurableReturns(result1 bool) {
	fake.instanceDefinitionConfigurableMutex.Lock()
	defer fake.instanceDefinitionConfigurableMutex.Unlock()
	fake.InstanceDefinitionConfigurableStub = nil
	fake.instanceDefinitionConfigurableReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeJobType) InstanceDefinitionConfigurableReturnsOnCall(i int, result1 bool) {
	fake.instanceDefinitionConfigurableMutex.Lock()
	defer fake.instanceDefinitionConfigurableMutex.Unlock()
	fake.InstanceDefinitionConfigurableStub = nil
	if fake.instanceDefinitionConfigurableReturnsOnCall == nil {
		fake.instanceDefinitionConfigurableReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.instanceDefinitionConfigurableReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeJobType) IsIncluded() bool {
	fake.isIncludedMutex.Lock()
	ret, specificReturn := fake.isIncludedReturnsOnCall[len(fake.isIncludedArgsForCall)]
	fake.isIncludedArgsForCall = append(fake.isIncludedArgsForCall, struct {
	}{})
	fake.recordInvocation("IsIncluded", []interface{}{})
	fake.isIncludedMutex.Unlock()
	if fake.IsIncludedStub != nil {
		return fake.IsIncludedStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.isIncludedReturns
	return fakeReturns.result1
}

func (fake *FakeJobType) IsIncludedCallCount() int {
	fake.isIncludedMutex.RLock()
	defer fake.isIncludedMutex.RUnlock()
	return len(fake.isIncludedArgsForCall)
}

func (fake *FakeJobType) IsIncludedCalls(stub func() bool) {
	fake.isIncludedMutex.Lock()
	defer fake.isIncludedMutex.Unlock()
	fake.IsIncludedStub = stub
}

func (fake *FakeJobType) IsIncludedReturns(result1 bool) {
	fake.isIncludedMutex.Lock()
	defer fake.isIncludedMutex.Unlock()
	fake.IsIncludedStub = nil
	fake.isIncludedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeJobType) IsIncludedReturnsOnCall(i int, result1 bool) {
	fake.isIncludedMutex.Lock()
	defer fake.isIncludedMutex.Unlock()
	fake.IsIncludedStub = nil
	if fake.isIncludedReturnsOnCall == nil {
		fake.isIncludedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isIncludedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeJobType) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hasPersistentDiskMutex.RLock()
	defer fake.hasPersistentDiskMutex.RUnlock()
	fake.instanceDefinitionConfigurableMutex.RLock()
	defer fake.instanceDefinitionConfigurableMutex.RUnlock()
	fake.isIncludedMutex.RLock()
	defer fake.isIncludedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJobType) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
